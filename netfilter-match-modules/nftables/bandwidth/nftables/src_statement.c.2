
static void bandwidth_stmt_print(const struct stmt *stmt, struct output_ctx *octx)
{
	nft_print(octx, "bandwidth ");

	if(stmt->bandwidth.cmp == NFT_BANDWIDTH_CMP_CHECK)
	{
		if(stmt->bandwidth.check_type != 0)
		{
			if(stmt->bandwidth.check_type == NFT_BANDWIDTH_CHECKTYPE_NOSWAP)
				nft_print(octx, "bcheck ");
			else if(stmt->bandwidth.check_type == NFT_BANDWIDTH_CHECKTYPE_SWAP)
				nft_print(octx, "bcheck-with-src-dst-swap ");
		}
	}

	if(stmt->bandwidth.id != NULL && strlen(stmt->bandwidth.id) > 0)
		nft_print(octx, "id \"%%s\" ",stmt->bandwidth.id);

	if(stmt->bandwidth.cmp != NFT_BANDWIDTH_CMP_CHECK)
	{
		/* determine current time in seconds since epoch, with offset for current timezone */
		int minuteswest = stmt->bandwidth.minutes_west;
		time_t now;
		time(&now);
		now = now - (minuteswest*60);

		if(stmt->bandwidth.type != 0)
		{
			nft_print(octx, "type ");
			if(stmt->bandwidth.type == NFT_BANDWIDTH_TYPE_COMBINED)
				nft_print(octx, "combined ");
			else if(stmt->bandwidth.type == NFT_BANDWIDTH_TYPE_INDIVIDUALSRC)
				nft_print(octx, "individual-src ");
			else if(stmt->bandwidth.type == NFT_BANDWIDTH_TYPE_INDIVIDUALDST)
				nft_print(octx, "individual-dst ");
			else if(stmt->bandwidth.type == NFT_BANDWIDTH_TYPE_INDIVIDUALLOCAL)
				nft_print(octx, "individual-local ");
			else if(stmt->bandwidth.type == NFT_BANDWIDTH_TYPE_INDIVIDUALREMOTE)
				nft_print(octx, "individual-remote ");
		}

		if(stmt->bandwidth.type == NFT_BANDWIDTH_TYPE_INDIVIDUALLOCAL || stmt->bandwidth.type == NFT_BANDWIDTH_TYPE_INDIVIDUALREMOTE)
		{
			if(stmt->bandwidth.subnet != NULL && strlen(stmt->bandwidth.subnet) > 0)
				nft_print(octx, "subnet %%s ",stmt->bandwidth.subnet);
			if(stmt->bandwidth.subnet6 != NULL && strlen(stmt->bandwidth.subnet6) > 0)
				nft_print(octx, "subnet6 %%s ",stmt->bandwidth.subnet6);
		}

		if(stmt->bandwidth.cmp == NFT_BANDWIDTH_CMP_LT || stmt->bandwidth.cmp == NFT_BANDWIDTH_CMP_GT)
		{
			if(stmt->bandwidth.cmp == NFT_BANDWIDTH_CMP_LT)
				nft_print(octx, "less-than %%u ", stmt->bandwidth.bandwidth_cutoff);
			else if(stmt->bandwidth.cmp == NFT_BANDWIDTH_CMP_GT)
				nft_print(octx, "greater-than %%u ", stmt->bandwidth.bandwidth_cutoff);
		}

		// Only print current-bandwidth for combined type. Others contain too much data and must be fetched using userspace util
		if(stmt->bandwidth.type == NFT_BANDWIDTH_TYPE_COMBINED)
		{
			if(stmt->bandwidth.reset_interval != NFT_BANDWIDTH_RSTINTVL_NEVER && stmt->bandwidth.next_reset != 0 && stmt->bandwidth.next_reset < now)
			{
				/*
				 * current bandwidth only gets reset when first packet after reset interval arrives, so output
				 * zero if we're already past interval, but no packets have arrived
				 */
				nft_print(octx, "current-bandwidth 0 ");
			}
			else
				nft_print(octx, "current-bandwidth %%u ", stmt->bandwidth.current_bandwidth);
		}

		if(stmt->bandwidth.reset_is_constant_interval)
			nft_print(octx, "reset-interval %%u ", stmt->bandwidth.reset_interval);
		else if(stmt->bandwidth.reset_interval != NFT_BANDWIDTH_RSTINTVL_NEVER)
		{
			nft_print(octx, "reset-interval ");
			if(stmt->bandwidth.reset_interval == NFT_BANDWIDTH_RSTINTVL_MINUTE)
				nft_print(octx, "minute ");
			else if(stmt->bandwidth.reset_interval == NFT_BANDWIDTH_RSTINTVL_HOUR)
				nft_print(octx, "hour ");
			else if(stmt->bandwidth.reset_interval == NFT_BANDWIDTH_RSTINTVL_DAY)
				nft_print(octx, "day ");
			else if(stmt->bandwidth.reset_interval == NFT_BANDWIDTH_RSTINTVL_WEEK)
				nft_print(octx, "week ");
			else if(stmt->bandwidth.reset_interval == NFT_BANDWIDTH_RSTINTVL_MONTH)
				nft_print(octx, "month ");
		}

		if(stmt->bandwidth.reset_time > 0)
			nft_print(octx, "reset-time %%u ", stmt->bandwidth.reset_time);

		if(stmt->bandwidth.num_intervals_to_save > 0)
			nft_print(octx, "intervals-to-save %%u", stmt->bandwidth.num_intervals_to_save);
	}
}

static void bandwidth_stmt_destroy(struct stmt *stmt)
{
	expr_free(stmt->bandwidth.id);
	expr_free(stmt->bandwidth.subnet);
	expr_free(stmt->bandwidth.subnet6);
}

static const struct stmt_ops bandwidth_stmt_ops = {
	.type		= STMT_BANDWIDTH,
	.name		= "bandwidth",
	.print		= bandwidth_stmt_print,
	.destroy	= bandwidth_stmt_destroy,
};

struct stmt *bandwidth_stmt_alloc(const struct location *loc)
{
	return stmt_alloc(loc, &bandwidth_stmt_ops);
}
