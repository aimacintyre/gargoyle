#!/bin/sh /etc/rc.common
# Copyright (C) 2008-2012 OpenWrt.org

START=60
USE_PROCD=1

SMBD_IFACE=""
found_sambashare="0"

config_get_sane()
{
	config_get "$@"
	set -- "$(echo "$1" | tr -d '<>[]{};%?=#\n')"
}

smb_header() {
	config_get_sane SMBD_IFACE $1 interface "lan"

	# resolve interfaces
	interfaces=$(
		. /lib/functions/network.sh

		for net in $SMBD_IFACE; do
			device=""
			if [[ "$net" == "tun*" ]] ; then
				[ "$(cat /sys/class/net/$net/carrier 2>/dev/null)" = 1 ] && printf "%s " "${device:-$net}"
			else
				network_is_up "$net" || continue
				network_get_device device "$net"
				printf "%s " "${device:-$net}"
			fi
		done
	)

	# we dont use netbios anymore as default and wsd/avahi is dns based
	hostname="$(cat /proc/sys/kernel/hostname | tr -d '{};%?=#\n')"

	config_get_sane 		name        				$1 name							"${hostname:-Gargoyle}"
	config_get_sane 		workgroup   				$1 workgroup					"${hostname:-Gargoyle}"
	config_get_sane 		description 				$1 description					"Ksmbd on ${hostname:-Gargoyle}"
	config_get_sane 		charset     				$1 charset						"UTF-8"
	config_get_bool ALLOW_LEGACY_PROTOCOLS		$1 allow_legacy_protocols		0

	sed -e "s#|NAME|#$name#g" \
	    -e "s#|WORKGROUP|#$workgroup#g" \
	    -e "s#|DESCRIPTION|#$description#g" \
	    -e "s#|INTERFACES|#$interfaces#g" \
	    -e "s#|CHARSET|#$charset#g" \
	    /etc/ksmbd/ksmbd.conf.template > /var/etc/ksmbd/ksmbd.conf

	{
		printf "\n######### Dynamic written config options #########\n"

		if [ "$ALLOW_LEGACY_PROTOCOLS" -eq 1 ]; then
			logger -p daemon.info -t 'ksmbd' "Legacy Protocols allowed, don't use this option for secure environments!"
			printf "\tserver min protocol = NT1\n"
			printf "\tserver signing = disabled\n"
		fi
	} >> /var/etc/ksmbd/ksmbd.conf
	
	local homes
	config_get_bool homes $1 homes 0
	[ $homes -gt 0 ] && {
		cat <<EOT >> /var/etc/ksmbd/ksmbd.conf

[homes]
	comment     = Home Directories
	browsable   = no
	read only   = no
	create mode = 0750
EOT
	}
	
	[ -e /etc/ksmbd/ksmbd.conf ] || ln -nsf /var/etc/ksmbd/ksmbd.conf /etc/ksmbd/ksmbd.conf

	if [ ! -L /etc/ksmbd/ksmbd.conf ]; then
		logger -p daemon.warn -t 'ksmbd' "Local custom /etc/ksmbd/ksmbd.conf file detected, all UCI/Luci config settings are ignored!"
	fi
}

rw_user_list=""
ro_user_list=""
all_user_list=""

add_user_to_lists()
{
	user="$1"
	read_type="$2"

	local rw_comma
	local ro_comma
	local all_comma
	if [ "$read_type" = "rw" ] ; then
		if [ -z "$rw_user_list" ] ; then  rw_comma="" ; else rw_comma=", " ; fi
		rw_user_list="$rw_user_list$rw_comma$user"
	else
		if [ -z "$ro_user_list" ] ; then  ro_comma="" ; else ro_comma=", " ; fi
		ro_user_list="$ro_user_list$ro_comma$user"
	fi
	if [ -z "$all_user_list" ] ; then all_comma="" ; else all_comma=", " ; fi
	all_user_list="$all_user_list$all_comma$user"
}

smb_add_share() {
	local all_comma

	config_get_sane name $1 name
	config_get_sane path $1 path
	config_get_sane comment $1 comment
	#config_get_sane users $1 users
	config_get_sane create_mask $1 create_mask
	config_get_sane dir_mask $1 dir_mask
	config_get_sane browseable $1 browseable
	config_get_sane read_only $1 read_only
	config_get_sane writeable $1 writeable
	config_get_sane guest_ok $1 guest_ok
	#config_get_bool force_root $1 force_root 0
	#config_get_sane write_list $1 write_list
	#config_get_sane read_list $1 read_list
	config_get_sane hide_dot_files $1 hide_dot_files
	config_get_sane veto_files $1 veto_files
	config_get_sane inherit_owner $1 inherit_owner
	config_get_sane force_create_mode $1 force_create_mode
	config_get_sane force_directory_mode $1 force_directory_mode
	
	[ -z "$name" ] || [ -z "$path" ] && return

	rw_user_list=""
	ro_user_list=""
	all_user_list=""
	config_list_foreach $1 users_ro add_user_to_lists "ro"
	config_list_foreach $1 users_rw add_user_to_lists "rw"

	{
		guest_acct=$(grep "guest account" /var/etc/ksmbd/ksmbd.conf | sed 's/\tguest account = //g')
		if [ "$guest_ok" = "yes" -a -n "$guest_acct" ] ; then
			if [ -z "$all_user_list" ] ; then all_comma="" ; else all_comma=", " ; fi
			all_user_list="$all_user_list$all_comma$guest_acct"
		fi

		printf "\n[%s]\n\tpath = %s\n" "$name" "$path"
		[ -n "$comment" ] && printf "\tcomment = %s\n" "$comment"
		
		[ -n "$all_user_list" ] && printf "\tvalid users = %s\n" "$all_user_list"
		[ -n "$rw_user_list" ] && printf "\twrite list = %s\n" "$rw_user_list"
		[ -n "$ro_user_list" ] && printf "\tread list = %s\n" "$ro_user_list"
		
		[ -n "$create_mask" ] && printf "\tcreate mask = %s\n" "$create_mask"
		[ -n "$dir_mask" ] && printf "\tdirectory mask = %s\n" "$dir_mask"
		[ -n "$force_create_mode" ] && printf "\tforce create mode = %s\n" "$force_create_mode"
		[ -n "$force_directory_mode" ] && printf "\tforce directory mode = %s\n" "$force_directory_mode"
		
		[ -n "$browseable" ] && printf "\tbrowseable = %s\n" "$browseable"
		[ -n "$read_only" ] && printf "\tread only = %s\n" "$read_only"
		[ -n "$writeable" ] && printf "\twriteable = %s\n" "$writeable"
		
		[ -n "$guest_ok" ] && printf "\tguest ok = %s\n" "$guest_ok"
		[ -n "$inherit_owner" ] && printf "\tinherit owner = %s\n" "$inherit_owner"
		
		[ -n "$hide_dot_files" ] && printf "\thide dot files = %s\n" "$hide_dot_files"
		[ -n "$veto_files" ] && printf "\tveto files = %s\n" "$veto_files"
	} >> /var/etc/ksmbd/ksmbd.conf

	found_sambashare="1"
}

init_config() {
	mkdir -p /var/etc/ksmbd

	config_load ksmbd
	CONFIG_APPEND=1 UCI_CONFIG_DIR=/var/run/config config_load ksmbd
	config_foreach smb_header samba
	config_foreach smb_add_share sambashare
}

service_triggers() {
	procd_add_reload_trigger "dhcp" "system" "ksmbd"

	for i in $SMBD_IFACE; do
		procd_add_reload_interface_trigger "$i"
	done
}

kill_server()
{
	if [ -e /sys/module/ksmbd ]; then
		if [ -e /sys/class/ksmbd-control/kill_server ]; then
			logger -p daemon.info -t 'ksmbd' "triggering kill_server"
			echo hard > /sys/class/ksmbd-control/kill_server
		fi
	fi
}

start_service() {
	init_config
	
	if [ ! -e /etc/ksmbd/ksmbd.conf ]; then
		logger -p daemon.error -t 'ksmbd' "missing config /etc/ksmbd/ksmbd.conf!"
		exit 1
	fi
	
	[ -e /sys/module/ksmbd ] && stop_service
	
	if [ "$found_sambashare" = "1" ] ; then
		[ ! -e /sys/module/ksmbd ] && modprobe ksmbd 2> /dev/null
		if [ ! -e /sys/module/ksmbd ]; then
			logger -p daemon.error -t 'ksmbd' "modprobe of ksmbd module failed, can\'t start ksmbd!"
			exit 1
		fi

		logger -p daemon.notice -t 'ksmbd' "Starting Ksmbd userspace service."
		procd_open_instance
		procd_add_mdns "smb" "tcp" "445" "daemon=ksmbd"
		procd_set_param command /usr/sbin/ksmbd.mountd --n
		procd_set_param file /etc/ksmbd/ksmbd.conf
		procd_set_param limits nofile=16384
		procd_close_instance
	fi
}

stop_service()
{
	logger -p daemon.notice -t 'ksmbd' "Stopping Ksmbd userspace service."
	killall ksmbd.mountd > /dev/null 2>&1
	
	[ -e /sys/module/ksmbd ] && rmmod ksmbd > /dev/null 2>&1
	# kill server if we cant rmmod
	[ -e /sys/module/ksmbd ] && kill_server
	# next try
	[ -e /sys/module/ksmbd ] && rmmod ksmbd > /dev/null 2>&1
	
	if [ -e /sys/module/ksmbd ]; then
		logger -p daemon.error -t 'ksmbd' "module still loaded after kill_server?"
	fi
	[ -f /tmp/ksmbd.lock ] && rm /tmp/ksmbd.lock
}

restart()
{
	stop
	start
}